{"version":3,"sources":["components/Card.js","components/Spinner.js","components/CountInfo.js","App.js","serviceWorker.js","index.js"],"names":["Card","info","className","prompt","answer","Spinner","state","CircularProgress","CountInfo","data","card_count","set_count","socket","socketIOClient","useStyles","makeStyles","theme","margin","spacing","App","classes","useState","topic","updateTopic","cards","updateCards","update_card_count","update_set_count","count_state","update_count_state","spinner_state","update_spinner_state","on","length","onSubmit","e","preventDefault","emit","fetch_topic_cards","Grid","container","alignItems","item","TextField","required","onChange","target","value","id","label","map","card","key","toString","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gLAEe,SAASA,EAAKC,GACzB,OACI,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,eACVD,EAAKE,QAEV,yBAAKD,UAAU,eACVD,EAAKG,S,yDCUPC,MAff,SAAiBJ,GAEb,OAAmB,IAAfA,EAAKK,MAED,8BAIA,yBAAKJ,UAAU,sBACX,kBAACK,EAAA,EAAD,QCGDC,MAdf,SAAmBC,GACf,OAAmB,IAAfA,EAAKH,MAED,8BAIA,yBAAKJ,UAAU,wBACX,0BAAMA,UAAU,cAAcO,EAAKC,YADvC,6BACmF,0BAAMR,UAAU,cAAcO,EAAKE,WADtH,UCENC,EAASC,IAAe,kBAExBC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,OAAQ,CACNA,OAAQD,EAAME,QAAQ,QAmEXC,MA/Df,WACI,IAAMC,EAAUN,IADL,EAGkBO,mBAAS,IAH3B,mBAGJC,EAHI,KAGGC,EAHH,OAIkBF,mBAAS,IAJ3B,mBAIJG,EAJI,KAIGC,EAJH,OAK6BJ,mBAAS,GALtC,mBAKJX,EALI,KAKQgB,EALR,OAM2BL,mBAAS,GANpC,mBAMJV,EANI,KAMOgB,EANP,OAO+BN,mBAAS,GAPxC,mBAOJO,EAPI,KAOSC,EAPT,OAQmCR,mBAAS,GAR5C,mBAQJS,EARI,KAQWC,EARX,KAkCX,OAxBAnB,EAAOoB,GAAG,gBAAgB,SAASvB,GAC/BgB,EAAYhB,EAAKe,OACjBE,EAAkBjB,EAAKe,MAAMS,QAC7BN,EAAiBlB,EAAKE,WACtBoB,EAAqB,GACrBF,EAAmB,MAoBnB,yBAAK3B,UAAU,OACX,yBAAKA,UAAU,UAAf,YACA,yBAAKA,UAAWkB,EAAQH,SACxB,0BAAMiB,SATW,SAAAC,GACrBA,EAAEC,iBAZoB,SAAAd,GACtBV,EAAOyB,KAAK,mBAAoB,CAC5Bf,MAAOA,IAEXG,EAAY,IACZC,EAAkB,GAClBC,EAAiB,GACjBI,EAAqB,GACrBF,EAAmB,GAKnBS,CAAkBhB,IAOoBpB,UAAU,cACxC,6BACI,kBAACqC,EAAA,EAAD,CAAMC,WAAS,EAACtB,QAAS,EAAGuB,WAAW,YACnC,kBAACF,EAAA,EAAD,CAAMG,MAAI,GACN,kBAAC,IAAD,OAEJ,kBAACH,EAAA,EAAD,CAAMG,MAAI,GACN,kBAACC,EAAA,EAAD,CAAWC,UAAQ,EAACC,SAAU,SAAAV,GAAC,OAAIZ,EAAYY,EAAEW,OAAOC,QAAQC,GAAG,uBAAuBC,MAAM,cAKhH,kBAAC,EAAD,CAAW3C,MAAOsB,EAAalB,WAAYA,EAAYC,UAAWA,IAClE,kBAAC,EAAD,CAASL,MAAOwB,IAChB,yBAAK5B,UAAU,kBAEPsB,EAAM0B,KAAI,SAACC,GAAD,OACN,kBAACnD,EAAD,CAAMoD,IAAKD,EAAKH,GAAGK,WAAYlD,OAAQgD,EAAKhD,OAAQC,OAAQ+C,EAAK/C,eC9DrEkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2fe79bca.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Card(info) {\n    return (\n        <div className=\"cards_container\">\n            <div className=\"card p_card\">\n                {info.prompt}\n            </div>\n            <div className=\"card a_card\">\n                {info.answer}\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nfunction Spinner(info) {\n\n    if (info.state === 0){\n        return (\n            <div></div>\n        )\n    } else {\n        return (\n            <div className=\"progress_container\">\n                <CircularProgress/>\n            </div>\n        )\n    }\n}\n\nexport default Spinner\n","import React from 'react'\n\nfunction CountInfo(data) {\n    if (data.state === 0) {\n        return (\n            <div></div>\n        )\n    } else {\n        return (\n            <div className=\"term_count_container\">\n                <span className=\"term_count\">{data.card_count}</span> terms found from the top <span className=\"term_count\">{data.set_count}</span> sets\n            </div>\n        )\n    }\n}\n\nexport default CountInfo","import React, { useState } from 'react';\nimport socketIOClient from 'socket.io-client'\nimport './App.css';\nimport Card from './components/Card.js';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport CollectionsBookmarkIcon from '@material-ui/icons/CollectionsBookmark';\nimport Spinner from './components/Spinner';\nimport CountInfo from './components/CountInfo'\n\nconst socket = socketIOClient(\"localhost:3001\");\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n}));\n\nfunction App() {\n    const classes = useStyles();\n\n    const [topic, updateTopic] = useState('')\n    const [cards, updateCards] = useState([])\n    const [card_count, update_card_count] = useState(0)\n    const [set_count, update_set_count] = useState(0)\n    const [count_state, update_count_state] = useState(0)\n    const [spinner_state, update_spinner_state] = useState(0)\n\n    socket.on('cards_update', function(data) {\n        updateCards(data.cards)\n        update_card_count(data.cards.length)\n        update_set_count(data.set_count)\n        update_spinner_state(0)\n        update_count_state(1)\n    })\n\n    const fetch_topic_cards = topic => {\n        socket.emit('requesting_cards', {\n            topic: topic\n        })\n        updateCards([])\n        update_card_count(0)\n        update_set_count(0)\n        update_spinner_state(1)\n        update_count_state(0)\n    }\n    \n    const get_course_cards = e => {\n        e.preventDefault()\n        fetch_topic_cards(topic)\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"header\">Quizhack</div>\n            <div className={classes.margin}></div>\n            <form onSubmit={get_course_cards} className=\"topic_form\">\n                <div>\n                    <Grid container spacing={1} alignItems=\"flex-end\">\n                        <Grid item>\n                            <CollectionsBookmarkIcon />\n                        </Grid>\n                        <Grid item>\n                            <TextField required onChange={e => updateTopic(e.target.value)} id=\"input-with-icon-grid\" label=\"Topic\" />\n                        </Grid>\n                    </Grid>\n                </div>\n            </form>\n            <CountInfo state={count_state} card_count={card_count} set_count={set_count}/>\n            <Spinner state={spinner_state}/>\n            <div className=\"flex_container\">\n                {\n                    cards.map((card) => (\n                        <Card key={card.id.toString()} prompt={card.prompt} answer={card.answer}></Card>\n                    ))\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}